//sysuÑ§ÉúÐÅÏ¢¹ÜÀíÏµÍ³ 
#include<iostream>
#define MAX_Student 100//×î´óÑ§Éú¹ÜÀíÊý
//typedef int rank;
using namespace std;
string a[3]={"c++","math analysis","English"};
class admin;
void admincontrol(admin administrator);
void studentcontrol(admin administrator);
class student//Ñ§ÉúÀà 
{
	protected:
		int Rank;//ÅÅÃû 
		double* score;//´¢´æµ¥¿Æ·ÖÊý 
		double allscore;//×Ü·Ö 
		string name,studentid,password,email,phonenum;//·Ö±ð´¢´æÐÕÃû,Ñ§ºÅ,ÃÜÂë£¬ÓÊÏä£¬µç»°ºÅÂë 
		int rank(){return Rank;}//·µ»ØÅÅÃû 
		void copy(student const A);//¸´ÖÆÑ§Éúº¯Êý 
	public:
		student(){double v=0;score=new double[3];for(int i=0;i!=3;score[i++]=v);allscore=0;int Rank=0;string password="0";}//¹¹Ôìº¯Êý£¬¹¹Ôì³õÊ¼ÃÜÂë0£¬Ñ§ÉúµÄ3¿Æ³É¼¨0 
		student(student const &A){copy(A);}//¹¹Ôìº¯Êý¸´ÖÆA 
        ~student(){delete [] score;}//Îö¹¹º¯Êý£¬É¾³ý³É¼¨Çø 
        alterpassword(string k){password=k;}//ÐÞ¸ÄÃÜÂë 
        //student&operator[](rank r)const;
        student &operator = (student const& A){copy(A);}//ÖØÔØÔËËã·û=Îª¸´ÖÆÓÒ²à¶ÔÏó 
        friend class admin;//adminÎªÓÑÔª 
        friend void studentcontrol(admin administrator);
        friend void admincontrol(admin administrator);
};
class admin
{
	protected:
		int size,capacity;//ÈÝÁ¿ºÍ×î´óÈÝÁ¿ 
		student *elem;//Êý¾ÝÇø£¬´æ´¢Ñ§Éú 
		void expand();//À©´óÊý¾ÝÇø 
		void shrink();//ËõÐ¡Êý¾ÝÇø 
		void Sort(int lo,int hi);//ÅÅÐòº¯Êý 
		int Max(int lo,int hi);//Ñ°ÕÒ×î´órankµÄÈË²¢·µ»Ørank
	public:
		admin(int c=MAX_Student,int s=0){elem=new student[capacity=c];size=0;}//¹¹Ôìº¯Êý³õÊ¼»¯Êý¾ÝÇø 
		~admin(){delete [] elem;}//Îö¹¹º¯Êý 
		int size1() {return size;}//·µ»Ø´óÐ¡ 
		bool empty() const{return !size;}//ÅÐ¶Ï¿Õº¯Êý 
		//int disordered()const;//ÅÐ¶ÏÊÇ·ñÓÐÐòº¯Êý 
		int find(string const& elem,int lo,int hi) const;//Ñ§ºÅÎÞÐòÑ°ÕÒº¯Êý 
		int search(string const& e,int lo,int hi) const;//Ñ§ºÅÓÐÐòÑ°ÕÒº¯Êý 
		void remove(int r);//É¾³ýÑ§Éúº¯Êý 
		int remove(int lo,int hi);//É¾³ýÇø¼äµÄº¯Êý 
		int insert(int r,student const&e);//²åÈëÑ§ÉúµÄº¯Êý 
		void newstudent();//ÐÂ½¨Ñ§ÉúµÄº¯Êý 
		void dosort(student *T,int lo,int hi,int flag);//ÅÅÐò·ÖÖ§ 
		void namesort(student *T,int lo,int hi,int flag);//ÒÔÐÕÃûÅÅÐò 
		void stunumsort(student *T,int lo,int hi,int flag);//ÒÔÑ§ºÅ½øÐÐÅÅÐò 
		void scoresort(student *T,int lo,int hi,int flag);//ÒÔ×Ü·ÖÊý½øÐÐÅÅÐò 
		//bool flag;
		friend void admincontrol(admin administrator);
		friend void studentcontrol(admin administrator);
};
void student::copy(student const A)
{
	Rank=A.Rank;
	score=A.score;
	name=A.name;
	studentid=A.studentid;
	password=A.password;
	email=A.email;
	phonenum=A.phonenum;
}
void admin::newstudent()
{
	if(size>MAX_Student)
	  expand();
	size++;
	cout << "ÇëÊäÈëÑ§ÉúÃû×Ö" << endl;
	cin >> elem[size].name;
	cout << "ÇëÊäÈëËûµÄÑ§ºÅ" << endl;
	cin >> elem[size].studentid;
	cout << "ÇëÊäÈëËûµÄÈý¿Æ³É¼¨" << endl;
	for(int i=0;i!=3;i++)
	   {
	   	cout << a[i] << " µÄ³É¼¨ÊÇ" <<endl;
	   	cin >> elem[size].score[i];
	   }
}
int admin::Max(int lo,int hi)
{
	int max;
	if(!empty())
	   return 0;
	max=elem[0].Rank;
	for (int i=1;i!=size;i++)
	   if(elem[i].Rank>max)
	      max=elem[i].Rank;
	return max;
}
void admin::expand()
{
	if(size<capacity)
	   return;
	student *oldelem = elem;
	elem = new student[2*capacity];
	for(int i=0;i!=size;i++)
	elem[i]=oldelem[i];
	delete [] oldelem;
}
void admin::shrink()
{
	if(size>capacity/2)
	   return;
	student *oldelem = elem;
	elem = new student[capacity/2+1];
	for(int i=0;i!=size;i++)
	elem[i]=oldelem[i];
	delete [] oldelem;
}
void admin::remove(int r)
{
	for(int i=r+1;i!=size;i++)
	   elem[i-1]=elem[i];
	size--;
	shrink();
}
int admin::remove(int lo,int hi)
{
	for(int i=lo;i<=hi;i++)
	  remove(i);
	return hi-lo+1;
}
void admin::Sort(int lo,int hi)
{
	cout << "ÇëÊäÈë°´Ê²Ã´½øÐÐÅÅÐò" << endl;
	cout << "[1].ÐÕÃû"<< endl;
	cout << "[2].Ñ§ºÅ" << endl;
	cout << "[3].×Ü³É¼¨" << endl;
	cout << "[4].·µ»Ø" << endl;
	int it;
	cin >> it;
	switch(it)
	{
		case 1:
			dosort(elem,0,size-1,1);
			break;
		case 2:
			dosort(elem,0,size-1,2);
			break;
		case 3:
			dosort(elem,0,size-1,3);
			break;
		default:
			break;
	}
}
void admin::dosort(student *T,int lo,int hi,int flag)
{
	cout << "[0].ÉýÐò" << endl;
	cout << "[1].½µÐò" << endl;
	int it;
	cin >> it;
	if(it!=0&&it!=1)
	   {
	   	cout << "ÎÞÐ§ÊäÈë" << endl;
	   	return;
	   }
	switch(flag)
	{
		case 1:
			namesort(T,lo,hi,it);
			break;
		case 2:
			stunumsort(T,lo,hi,it);
			break;
		case 3:
			scoresort(T,lo,hi,it);
			break;
		default:
			break;
	}
}
void admin::scoresort(student *T,int lo,int hi,int flag)
{
	bool flag1=false;
	if (!flag)
	  {
	  	for (int j=hi;j>=0;j--)
	  	   {
			 for(int i=0;i<j;i++)
	  	      if(T[i].allscore<T[i+1].allscore)
	  	         {
	  	         	swap(T[i],T[i+1]);
	  	         	flag1=true;
				   }
			 if(!flag1)
			    break;
			 else
			    flag1=false;
	       }
}
}
void admin::namesort(student *T,int lo,int hi,int flag)
{
	bool flag1=false;
	if (!flag)
	  {
	  	for (int j=hi;j>=0;j--)
	  	   {
			 for(int i=0;i<j;i++)
	  	      if(T[i].name<T[i+1].name)
	  	         {
	  	         	swap(T[i],T[i+1]);
	  	         	flag1=true;
				   }
			 if(!flag1)
			    break;
			 else
			    flag1=false;
	       }
}
}
void admin::stunumsort(student *T,int lo,int hi,int flag)
{
	bool flag1=false;
	if (!flag)
	  {
	  	for (int j=hi;j>=0;j--)
	  	   {
			 for(int i=0;i<j;i++)
	  	      if(T[i].studentid<T[i+1].studentid)
	  	         {
	  	         	swap(T[i],T[i+1]);
	  	         	flag1=true;
				   }
			 if(!flag1)
			    break;
			 else
			    flag1=false;
	       }
}
}
int admin::find(string const& e,int lo,int hi) const
{
	for(int i=lo;i<=hi;i++)
	   if(elem[i].studentid==e)
	      return i;
	return -1;
}
int admin::search(string const& e,int lo,int hi) const
{
	int mi=(lo+hi)/2;
	if(lo>=hi)
	   return -1;
	if (elem[mi].studentid==e)
	   return mi;
	search(e,lo,mi);
	search(e,mi+1,hi);
}
int admin::insert(int r,student const&e)
{
	if(size+1>capacity)
	   expand();
	for(int i=size;i>=r;i++)
	   elem[i+1]=elem[i];
	elem[r]=e;
	size++;
}

int main()
{
	cout << "»¶Ó­À´µ½ÖÐÉ½´óÑ§ÐÅÏ¢¹ÜÀíÏµÍ³" << endl;
	cout << "Çë°´ÈÎÒâ¼ü¿ªÊ¼ÏÂÒ»²½²Ù×÷" <<endl;
	//system("pause");
	getchar();
	char it;
	admin administrator;
	while(1)
	{
		cout << "ÇëÎÊÄúÊÇ" << endl;
		cout << "[1].Ñ§Éú" << endl;
		cout << "[2].¹ÜÀíÔ±" << endl;
		cout << "[3].ÍË³ö" <<endl;
		cin >> it;
		if(it=='1')
		   	studentcontrol(administrator);
		else if(it=='2')
			admincontrol(administrator);
		else if(it=='3')
		    break;
		else
		    cout << "ÊäÈëÓÐÎó" << endl;
	}
}
void studentcontrol(admin administrator)
{
	cout << "[1].µÇÂ¼" << endl;
	cout << "[2].×¢²á" << endl;
	cout << "[3].·µ»Ø" <<endl;
	int it;
	cin >> it;
	if (it==1)
	   {
	   	string stunum,password;
	   	int i=0;
	   	cout << "ÇëÊäÈëÑ§ºÅ" << endl;
	   	cin >> stunum;
	   	cout << "ÇëÊäÈëÃÜÂë" << endl;
	   	cin >> password;
	   	for (;i!=administrator.size;i++)
	   	   {
			 if((administrator.elem[i]).studentid==stunum&&(administrator.elem[i]).password==password)
	   	       break;
	   	    if((administrator.elem[i]).studentid==stunum&&(administrator.elem[i]).password!=password)
	   	       	{
					  cout << "ÃÜÂë´íÎó" <<endl;
					  return;
				}
			if((administrator.elem[i]).studentid!=stunum)
			   {
			   cout << "²»´æÔÚÕâ¸öÑ§ºÅµÄÑ§Éú" << endl;
			   return;
		       }
		   }
		cout << "»¶Ó­Äú" << (administrator.elem[i]).name << " Í¬Ñ§" << endl;
		while (1)
		{
			cout << "[1].²éÑ¯ÅÅÃû" << endl;
			cout << "[2].²éÑ¯³É¼¨" << endl;
			//cout << "[3].²éÑ¯¸öÈËÐÅÏ¢" << endl;
			cout << "[3].ÍË³ö" << endl;
			int it1;
			cin >> it1;
			if(it1==3)
			   break;
			switch(it1)
			{
				case 1:
					cout << "ÄúµÄÅÅÃûÊÇ" << (administrator.elem[i]).Rank << endl;
					break;
				case 2:
					for(int j=0;j!=3;j++)
					    	cout << a[j] << " µÄ³É¼¨ÊÇ" << (administrator.elem[i]).score[j] << endl;
					cout << "×Ü³É¼¨ÊÇ " <<(administrator.elem[i]).allscore << endl;
					break;
				default:
					break;
			}
	}
	   }
	if (it==2)
	{
		cout << "ÇëÊäÈëÄãµÄÑ§ºÅºÍÐÕÃû" <<endl;
		string stuid,name,password,email,phonenum;
		cin >> stuid >> name ;
		for(int p=0;p!=administrator.size;p++)
		   if((administrator.elem[p]).studentid==stuid)
		       {
		       	cout << "ÄãµÄÐÅÏ¢ÒÑ±»Â¼ÈëÏµÍ³£¬ÇëÇ°È¥µÇÂ¼" << endl;
		       	return;
			   }
		student e;
		e.name=name;
		e.studentid=stuid;
		while(1)
		{
		cout << "ÇëÐÞ¸ÄÄúµÄÃÜÂë(ÖÁÉÙ6Î»)" << endl;
		cin >> password;
		if(password.size()<6)
		    cout << "ÎÞÐ§ÃÜÂë" << endl;
		else
		    break;
 	    }
		e.alterpassword(password);
		for(int j=0;j!=3;j++)
		   {
		   	cout << "ÇëÊäÈë" << a[j] << " µÄ³É¼¨" <<endl;
		   	cin >> e.score[j];
		   	e.allscore+=e.score[j];
		   }
		administrator.insert(administrator.size+1,e);
		cout << "Íê³É´´½¨" <<endl;
		cout << "ÇëµÇÈëÏµÍ³" <<endl;
		return;
	}
}
void admincontrol(admin adminstrator)
{
	cout << "Ä¬ÈÏ¹ÜÀíÔ±ÃÜÂëadmin,ÇëÊ¹ÓÃÕß×ÔÐÐ·â×°" <<endl;
	cout << "ÇëÊäÈë¹ÜÀíÔ±ÃÜÂë" << endl;
	string g;
	cin >> g;
	if(g!="admin")
	{
	   cout << "ÃÜÂë´íÎó" <<endl;
	   return;
    }
    while(1)
    {
    cout << "[1].ÁÐ³öËùÓÐÑ§Éú" << endl;
    cout << "[2].²éÑ¯Ä³¸öÑ§Éú" << endl;
    cout << "[3].ÅÅÐòÑ§Éú" << endl;
    cout << "[4].´´½¨Ñ§Éú" << endl;
    //cout << "[5].Ñ°ÕÒÑ§Éú" << endl;
    cout << "[5].É¾³ýÑ§Éú" << endl;
    cout << "[6].ÍË³ö" << endl;
    int it;
    cin >> it;
    string stuid,id;
	int k,b;
    if(it==6)
       return;
    switch(it)
    {
    	case 1:
    		for(int i=0;i!=adminstrator.size;i++)
    		   {
    		   	cout << "Ñ§ºÅ" << endl;
    		   	cout << (adminstrator.elem[i]).studentid << endl;
    		   	cout << "ÐÕÃû" << endl;
    		   	cout << (adminstrator.elem[i]).name << endl;
			   }
		case 2:
			cout << "ÇëÊäÈëÑ§ºÅ" << endl;
			cin >> stuid;
			k=adminstrator.find(stuid,0,adminstrator.size-1);
			if (k==-1)
			{
			   cout << "²»´æÔÚ¸ÃÑ§Éú" << endl;
			   break;
			}
			cout << "¸ÃÑ§ÉúÐÕÃûÊÇ " << (adminstrator.elem[k]).name << endl;
			cout << "¸ÃÑ§Éú³É¼¨ÈçÏÂ" << endl;
			for (int t=0;t!=3;t++)
			   cout << a[t] <<" µÄ³É¼¨ÊÇ " << (adminstrator.elem[k]).score[t] << endl;
			cout << "ËûµÄÅÅÃûÊÇ" << (adminstrator.elem[k]).Rank;
			break;
		case 3:
			adminstrator.Sort(0,adminstrator.size-1);
			break;
		case 4:
			adminstrator.newstudent();
			break;
		case 5:
			cout << "ÇëÊäÈë¸ÃÑ§ÉúµÄÑ§ºÅ" << endl;
			cin >> id;
			b=adminstrator.find(id,0,adminstrator.size-1);
			cout << "ÄúÈ·ÈÏÒªÉ¾³ý " << (adminstrator.elem[b]).name << "Í¬Ñ§Âð?(y/n)" << endl;
			if(getchar()=='y')
			   adminstrator.remove(b);
			else
			  break;
		default:
			break;
	}
	
}
}
